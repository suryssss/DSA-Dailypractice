Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

solution:

        n=len(s)
        m=len(p)
        res=[]
        if n<m:
            return res
        pc=Counter(p)
        wc=Counter()
        l=0
        for r in range(n):
            wc[s[r]]+=1
            if r-l+1==m:
                if wc==pc:
                    res.append(l)
                wc[s[l]]-=1
                if wc[s[l]]==0:
                    del wc[s[l]]
                l+=1
        return res
